import React, {useEffect, useRef, useState} from 'react';
import {Dimensions, StyleSheet, View} from 'react-native';
import Svg, {Path} from 'react-native-svg';
import Animated, {
  Easing,
  useAnimatedProps,
  useSharedValue,
  withRepeat,
  withTiming,
} from 'react-native-reanimated';

const colors = ['#FFC27A', '#7EDAB9', '#45A6E5', '#FE8777'];
const margin = 10;
const vWidth = 597 + 50;
const vHeight = 148 + margin;
const width = Dimensions.get('window').width - 64;
const height = (width * vHeight) / vWidth;
const path = [
  'M45.6 148C37.6 148 30.7333 147.067 25 145.2C19.4 143.333 14.8 141 11.2 138.2C7.6 135.4 4.93333 132.6 3.2 129.8C1.46667 127 0.533334 124.667 0.4 122.8C0.266667 121.333 0.666667 120.2 1.6 119.4C2.66667 118.467 3.8 118 5 118H20.8C21.3333 118 21.8 118.067 22.2 118.2C22.6 118.333 23.1333 118.733 23.8 119.4C25.5333 120.867 27.3333 122.4 29.2 124C31.2 125.6 33.5333 127 36.2 128.2C38.8667 129.267 42.2 129.8 46.2 129.8C51.4 129.8 55.7333 128.8 59.2 126.8C62.8 124.667 64.6 121.667 64.6 117.8C64.6 115 63.8 112.733 62.2 111C60.7333 109.267 57.9333 107.733 53.8 106.4C49.6667 104.933 43.8 103.4 36.2 101.8C28.7333 100.067 22.5333 97.8667 17.6 95.2C12.6667 92.5333 9 89.2 6.6 85.2C4.2 81.2 3 76.5333 3 71.2C3 66 4.53333 61.0667 7.6 56.4C10.8 51.6 15.4667 47.6667 21.6 44.6C27.8667 41.5333 35.6 40 44.8 40C52 40 58.2667 40.9333 63.6 42.8C68.9333 44.5333 73.3333 46.7333 76.8 49.4C80.4 52.0667 83.1333 54.8 85 57.6C86.8667 60.2667 87.8667 62.6 88 64.6C88.1333 66.0667 87.7333 67.2667 86.8 68.2C85.8667 69 84.8 69.4 83.6 69.4H68.8C68.1333 69.4 67.5333 69.2667 67 69C66.4667 68.7333 65.9333 68.4 65.4 68C63.9333 66.6667 62.3333 65.2667 60.6 63.8C58.8667 62.3333 56.7333 61.0667 54.2 60C51.8 58.8 48.6 58.2 44.6 58.2C39.5333 58.2 35.6667 59.3333 33 61.6C30.3333 63.7333 29 66.4667 29 69.8C29 72.0667 29.6 74.0667 30.8 75.8C32.1333 77.4 34.7333 78.9333 38.6 80.4C42.4667 81.8667 48.3333 83.4 56.2 85C65.1333 86.6 72.2 89 77.4 92.2C82.7333 95.2667 86.4667 98.8667 88.6 103C90.8667 107 92 111.467 92 116.4C92 122.4 90.2 127.8 86.6 132.6C83.1333 137.4 77.9333 141.2 71 144C64.2 146.667 55.7333 148 45.6 148Z',
  'M117.445 146C116.112 146 114.979 145.533 114.045 144.6C113.112 143.667 112.645 142.533 112.645 141.2V46.8C112.645 45.4667 113.112 44.3333 114.045 43.4C114.979 42.4667 116.112 42 117.445 42H134.045C135.512 42 136.645 42.4667 137.445 43.4C138.379 44.3333 138.845 45.4667 138.845 46.8V141.2C138.845 142.533 138.379 143.667 137.445 144.6C136.645 145.533 135.512 146 134.045 146H117.445ZM116.645 24.8C115.179 24.8 113.979 24.4 113.045 23.6C112.245 22.6667 111.845 21.4667 111.845 20V5.6C111.845 4.26666 112.245 3.13333 113.045 2.19999C113.979 1.26666 115.179 0.799999 116.645 0.799999H134.845C136.312 0.799999 137.512 1.26666 138.445 2.19999C139.379 3.13333 139.845 4.26666 139.845 5.6V20C139.845 21.4667 139.379 22.6667 138.445 23.6C137.512 24.4 136.312 24.8 134.845 24.8H116.645Z',
  'M174.281 146C172.948 146 171.815 145.533 170.881 144.6C169.948 143.667 169.481 142.533 169.481 141.2V46.8C169.481 45.4667 169.948 44.3333 170.881 43.4C171.815 42.4667 172.948 42 174.281 42H190.681C192.015 42 193.148 42.4667 194.081 43.4C195.015 44.3333 195.481 45.4667 195.481 46.8V55C198.948 50.7333 203.348 47.2 208.681 44.4C214.148 41.4667 220.881 40 228.881 40C237.015 40 244.081 41.8667 250.081 45.6C256.081 49.2 260.681 54.3333 263.881 61C267.215 67.6667 268.881 75.6667 268.881 85V141.2C268.881 142.533 268.415 143.667 267.481 144.6C266.548 145.533 265.415 146 264.081 146H246.481C245.148 146 244.015 145.533 243.081 144.6C242.148 143.667 241.681 142.533 241.681 141.2V86.2C241.681 78.4667 239.748 72.4 235.881 68C232.148 63.6 226.681 61.4 219.481 61.4C212.548 61.4 207.015 63.6 202.881 68C198.748 72.4 196.681 78.4667 196.681 86.2V141.2C196.681 142.533 196.215 143.667 195.281 144.6C194.348 145.533 193.215 146 191.881 146H174.281Z',
  'M299.086 146C297.753 146 296.619 145.533 295.686 144.6C294.753 143.667 294.286 142.533 294.286 141.2V46.8C294.286 45.4667 294.753 44.3333 295.686 43.4C296.619 42.4667 297.753 42 299.086 42H315.686C317.153 42 318.286 42.4667 319.086 43.4C320.019 44.3333 320.486 45.4667 320.486 46.8V141.2C320.486 142.533 320.019 143.667 319.086 144.6C318.286 145.533 317.153 146 315.686 146H299.086ZM298.286 24.8C296.819 24.8 295.619 24.4 294.686 23.6C293.886 22.6667 293.486 21.4667 293.486 20V5.6C293.486 4.26666 293.886 3.13333 294.686 2.19999C295.619 1.26666 296.819 0.799999 298.286 0.799999H316.486C317.953 0.799999 319.153 1.26666 320.086 2.19999C321.019 3.13333 321.486 4.26666 321.486 5.6V20C321.486 21.4667 321.019 22.6667 320.086 23.6C319.153 24.4 317.953 24.8 316.486 24.8H298.286Z',
  'M348.769 146C347.302 146 346.102 145.533 345.169 144.6C344.369 143.667 343.969 142.533 343.969 141.2V129.8C343.969 128.6 344.235 127.467 344.769 126.4C345.435 125.2 346.102 124.2 346.769 123.4L397.969 62.8H350.369C349.035 62.8 347.902 62.4 346.969 61.6C346.035 60.6667 345.569 59.4667 345.569 58V46.8C345.569 45.4667 346.035 44.3333 346.969 43.4C347.902 42.4667 349.035 42 350.369 42H426.169C427.635 42 428.769 42.4667 429.569 43.4C430.502 44.3333 430.969 45.4667 430.969 46.8V59C430.969 60.2 430.702 61.2667 430.169 62.2C429.635 63.1333 428.969 64.1333 428.169 65.2L378.169 125.2H430.369C431.702 125.2 432.835 125.667 433.769 126.6C434.702 127.4 435.169 128.533 435.169 130V141.2C435.169 142.533 434.702 143.667 433.769 144.6C432.835 145.533 431.702 146 430.369 146H348.769Z',
  'M455.019 146C453.552 146 452.352 145.533 451.419 144.6C450.619 143.667 450.219 142.533 450.219 141.2V129.8C450.219 128.6 450.485 127.467 451.019 126.4C451.685 125.2 452.352 124.2 453.019 123.4L504.219 62.8H456.619C455.285 62.8 454.152 62.4 453.219 61.6C452.285 60.6667 451.819 59.4667 451.819 58V46.8C451.819 45.4667 452.285 44.3333 453.219 43.4C454.152 42.4667 455.285 42 456.619 42H532.419C533.885 42 535.019 42.4667 535.819 43.4C536.752 44.3333 537.219 45.4667 537.219 46.8V59C537.219 60.2 536.952 61.2667 536.419 62.2C535.885 63.1333 535.219 64.1333 534.419 65.2L484.419 125.2H536.619C537.952 125.2 539.085 125.667 540.019 126.6C540.952 127.4 541.419 128.533 541.419 130V141.2C541.419 142.533 540.952 143.667 540.019 144.6C539.085 145.533 537.952 146 536.619 146H455.019Z',
  'M591.869 148C584.935 148 578.669 146.667 573.069 144C567.469 141.2 563.002 137.533 559.669 133C556.469 128.333 554.869 123.133 554.869 117.4C554.869 108.067 558.602 100.667 566.069 95.2C573.669 89.6 583.669 85.8667 596.069 84L623.469 80V75.8C623.469 70.2 622.069 65.8667 619.269 62.8C616.469 59.7333 611.669 58.2 604.869 58.2C600.069 58.2 596.135 59.2 593.069 61.2C590.135 63.0667 587.935 65.6 586.469 68.8C585.402 70.5333 583.869 71.4 581.869 71.4H566.069C564.602 71.4 563.469 71 562.669 70.2C562.002 69.4 561.669 68.3333 561.669 67C561.802 64.8667 562.669 62.2667 564.269 59.2C565.869 56.1333 568.402 53.2 571.869 50.4C575.335 47.4667 579.802 45 585.269 43C590.735 41 597.335 40 605.069 40C613.469 40 620.535 41.0667 626.269 43.2C632.135 45.2 636.802 47.9333 640.269 51.4C643.735 54.8667 646.269 58.9333 647.869 63.6C649.469 68.2667 650.269 73.2 650.269 78.4V141.2C650.269 142.533 649.802 143.667 648.869 144.6C647.935 145.533 646.802 146 645.469 146H629.269C627.802 146 626.602 145.533 625.669 144.6C624.869 143.667 624.469 142.533 624.469 141.2V133.4C622.735 135.933 620.402 138.333 617.469 140.6C614.535 142.733 610.935 144.533 606.669 146C602.535 147.333 597.602 148 591.869 148ZM598.669 129C603.335 129 607.535 128 611.269 126C615.135 124 618.135 120.933 620.269 116.8C622.535 112.533 623.669 107.2 623.669 100.8V96.6L603.669 99.8C595.802 101 589.935 102.933 586.069 105.6C582.202 108.267 580.269 111.533 580.269 115.4C580.269 118.333 581.135 120.867 582.869 123C584.735 125 587.069 126.533 589.869 127.6C592.669 128.533 595.602 129 598.669 129Z',
];

interface Props {
  d: string;
  progress: Animated.SharedValue<number>;
}

const AnimatedPath = Animated.createAnimatedComponent(Path);

const AnimatedStroke = ({d, progress}: Props) => {
  const [length, setLength] = useState(0);
  const strokeColor = colors[Math.round(Math.random() * (colors.length - 1))];
  const ref = useRef<Path>(null);
  const bgStrokeAnimation = useAnimatedProps(() => ({
    strokeDashoffset:
      length - length * Easing.bezierFn(0.61, 1, 0.88, 1)(progress.value),
  }));
  const strokeAnimation = useAnimatedProps(() => ({
    strokeDashoffset:
      length - length * Easing.bezierFn(0.65, 0, 0.35, 1)(progress.value),
  }));
  return (
    <>
      <AnimatedPath
        animatedProps={bgStrokeAnimation}
        d={d}
        stroke={strokeColor}
        strokeWidth={10}
        strokeDasharray={length}
      />
      <AnimatedPath
        animatedProps={strokeAnimation}
        onLayout={() => setLength(ref.current.getTotalLength())}
        ref={ref}
        d={d}
        stroke="black"
        strokeWidth={10}
        strokeDasharray={length}
      />
    </>
  );
};

export const SVGAnimation = () => {
  const progress = useSharedValue(0);
  useEffect(() => {
    progress.value = withRepeat(
      withTiming(1, {duration: 2000, easing: Easing.linear}),
      -1,
      true,
    );
  }, [progress]);
  return (
    <View style={styles.container}>
      <Svg
        width={width}
        height={height}
        viewBox={[-margin, -margin, vWidth + margin, vHeight + margin].join(
          ' ',
        )}>
        {path.map((d, index) => (
          <AnimatedStroke progress={progress} key={index} d={d} />
        ))}
      </Svg>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
